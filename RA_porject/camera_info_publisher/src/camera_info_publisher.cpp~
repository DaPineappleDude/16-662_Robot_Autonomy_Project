// %Tag(FULLTEXT)%
#include "ros/ros.h"
#include "std_msgs/String.h"
#include <sensor_msgs/CameraInfo.h>

/**
 * This tutorial demonstrates simple receipt of messages over the ROS system.
 */
// %Tag(CALLBACK)%
sensor_msgs::CameraInfo c_info;

void chatterCallback(const sensor_msgs::CameraInfo::ConstPtr& msg)
{
  if(msg != NULL) {
    c_info.height = msg->height;
    c_info.width = msg->width;
    c_info.distortion_model = msg->distortion_model;
    for(int i = 0 ;i <9; i++) c_info.K[i] = msg->K[i];
    c_info.R[0] = 1;
    c_info.R[3] = 1;
    c_info.R[8] = 1;
    for(int i = 0; i<12; i++) c_info.P[i] = msg->P[i];
  }
  //ROS_INFO("read!");
  return;
}
// %EndTag(CALLBACK)%

int main(int argc, char **argv)
{
  /**
   * The ros::init() function needs to see argc and argv so that it can perform
   * any ROS arguments and name remapping that were provided at the command line.
   * For programmatic remappings you can use a different version of init() which takes
   * remappings directly, but for most command-line programs, passing argc and argv is
   * the easiest way to do it.  The third argument to init() is the name of the node.
   *
   * You must call one of the versions of ros::init() before using any other
   * part of the ROS system.
   */
  ros::init(argc, argv, "listener");

  /**
   * NodeHandle is the main access point to communications with the ROS system.
   * The first NodeHandle constructed will fully initialize this node, and the last
   * NodeHandle destructed will close down the node.
   */
  ros::NodeHandle n;
  ros::NodeHandle n2;

  /**
   * The subscribe() call is how you tell ROS that you want to receive messages
   * on a given topic.  This invokes a call to the ROS
   * master node, which keeps a registry of who is publishing and who
   * is subscribing.  Messages are passed to a callback function, here
   * called chatterCallback.  subscribe() returns a Subscriber object that you
   * must hold on to until you want to unsubscribe.  When all copies of the Subscriber
   * object go out of scope, this callback will automatically be unsubscribed from
   * this topic.
   *
   * The second parameter to the subscribe() function is the size of the message
   * queue.  If messages are arriving faster than they are being processed, this
   * is the number of messages that will be buffered up before beginning to throw
   * away the oldest ones.
   */
// %Tag(SUBSCRIBER)%
  
  ros::Publisher chatter_pub = n.advertise<sensor_msgs::CameraInfo>("/camera/camera_info", 10);
  ros::Subscriber sub = n.subscribe("/camera/rgb/camera_info", 110, chatterCallback);
// %EndTag(SUBSCRIBER)%

  /**
   * ros::spin() will enter a loop, pumping callbacks.  With this version, all
   * callbacks will be called from within this thread (the main one).  ros::spin()
   * will exit when Ctrl-C is pressed, or the node is shutdown by the master.
  ros::Rate loop_rate(10);

  /**
   * A count of how many messages we have sent. This is used to create
   * a unique string for each message.
   */
   ros::Rate loop_rate(10);
  int count = 0;
  c_info.height = 211;
  while (ros::ok())
  {
    
    chatter_pub.publish(c_info);

    ros::spinOnce();

    loop_rate.sleep();
    ++count;
    //ROS_INFO("cool!");
  }

  return 0;
}
// %EndTag(FULLTEXT)%
